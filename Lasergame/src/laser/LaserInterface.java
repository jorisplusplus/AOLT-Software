/* 
 * Copyright (C) 2014 Joris
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package laser;
import java.awt.Component;
import jssc.SerialPortList;

/**
 * @author Joris
 */
public class LaserInterface extends javax.swing.JFrame {
    
    /**
     * Creates new form LaserInterface
     */
    public LaserInterface() {
        initComponents();
        updateList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectBTN = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();
        gamemodeBox = new javax.swing.JComboBox();
        gamemodeBTN = new javax.swing.JButton();
        comPortBox = new javax.swing.JComboBox();
        comRefresh = new javax.swing.JButton();
        abortGamemodeBTN = new javax.swing.JButton();
        panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        health = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        lives = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        ammo = new javax.swing.JSpinner();
        bulletsCheckbox = new javax.swing.JCheckBox();
        livesCheckbox = new javax.swing.JCheckBox();
        advancedBTN = new javax.swing.JButton();
        startBTN = new javax.swing.JButton();
        logCheckbox = new javax.swing.JCheckBox();
        DisconnectBTN = new javax.swing.JButton();
        DetectBTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Another Opensource Laser Tag");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setName("Lasergame"); // NOI18N
        setResizable(false);

        connectBTN.setText("Connect");
        connectBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectBTNActionPerformed(evt);
            }
        });

        log.setEditable(false);
        log.setColumns(20);
        log.setRows(5);
        jScrollPane1.setViewportView(log);

        gamemodeBTN.setText("Set gamemode");
        gamemodeBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gamemodeBTNActionPerformed(evt);
            }
        });

        comRefresh.setText("Refresh");
        comRefresh.setToolTipText("");
        comRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comRefreshActionPerformed(evt);
            }
        });

        abortGamemodeBTN.setText("Abort gamemode");
        abortGamemodeBTN.setEnabled(false);
        abortGamemodeBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abortGamemodeBTNActionPerformed(evt);
            }
        });

        panel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Health: ");
        jLabel1.setToolTipText("");

        health.setModel(new javax.swing.SpinnerNumberModel(1, 1, 99, 1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Lives: ");
        jLabel2.setToolTipText("");

        lives.setModel(new javax.swing.SpinnerNumberModel(1, 1, 99, 1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Ammo: ");
        jLabel3.setToolTipText("");

        ammo.setModel(new javax.swing.SpinnerNumberModel(1, 1, 9999, 1));

        bulletsCheckbox.setText("Infinite?");
        bulletsCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bulletsCheckboxActionPerformed(evt);
            }
        });

        livesCheckbox.setText("Infinite?");
        livesCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                livesCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lives)
                            .addComponent(health)))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ammo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bulletsCheckbox)
                    .addComponent(livesCheckbox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(health, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lives, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(livesCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ammo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bulletsCheckbox))
                .addContainerGap(372, Short.MAX_VALUE))
        );

        advancedBTN.setText("Advanced");
        advancedBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedBTNActionPerformed(evt);
            }
        });

        startBTN.setText("Start");
        startBTN.setMaximumSize(new java.awt.Dimension(81, 23));
        startBTN.setMinimumSize(new java.awt.Dimension(81, 23));
        startBTN.setPreferredSize(new java.awt.Dimension(81, 23));
        startBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBTNActionPerformed(evt);
            }
        });

        logCheckbox.setText("Log transmissions");

        DisconnectBTN.setText("Disconnect");
        DisconnectBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisconnectBTNActionPerformed(evt);
            }
        });

        DetectBTN.setText("Detect");
        DetectBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DetectBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comPortBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(connectBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                            .addComponent(comRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DisconnectBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(gamemodeBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(gamemodeBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(abortGamemodeBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(startBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DetectBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(advancedBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(logCheckbox))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(connectBTN)
                            .addComponent(gamemodeBTN))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gamemodeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comPortBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comRefresh)
                            .addComponent(startBTN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(advancedBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(abortGamemodeBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DisconnectBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DetectBTN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("LasergameGUI");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectBTNActionPerformed
        Main.Connected = false;
        Main.Handler.TransferBuffer.clear();
        Main.Handler.Open(comPortBox.getSelectedItem().toString()); //Open port. Send hello packet.
    }//GEN-LAST:event_connectBTNActionPerformed

    private void gamemodeBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gamemodeBTNActionPerformed
        gamemodeBox.setEnabled(false);
        gamemodeBTN.setEnabled(false);
        abortGamemodeBTN.setEnabled(true);
        Main.detectGuns();
        Main.initGamemode();
    }//GEN-LAST:event_gamemodeBTNActionPerformed

    private void comRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comRefreshActionPerformed
        updateList();
    }//GEN-LAST:event_comRefreshActionPerformed

    private void abortGamemodeBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abortGamemodeBTNActionPerformed
        gamemodeBox.setEnabled(true);
        gamemodeBTN.setEnabled(true);
        abortGamemodeBTN.setEnabled(false);
        Main.abortGamemode();
    }//GEN-LAST:event_abortGamemodeBTNActionPerformed

    private void livesCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_livesCheckboxActionPerformed
        lives.setEnabled(!livesCheckbox.isSelected());
    }//GEN-LAST:event_livesCheckboxActionPerformed

    private void bulletsCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bulletsCheckboxActionPerformed
        ammo.setEnabled(!bulletsCheckbox.isSelected());
    }//GEN-LAST:event_bulletsCheckboxActionPerformed

    private void advancedBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedBTNActionPerformed
       AdvancedInterface adInt = new AdvancedInterface();
       adInt.setVisible(true);
    }//GEN-LAST:event_advancedBTNActionPerformed

    private void startBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBTNActionPerformed
        Main.startGamemode();
    }//GEN-LAST:event_startBTNActionPerformed

    private void DisconnectBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisconnectBTNActionPerformed
        Main.Handler.Disconnect();
    }//GEN-LAST:event_DisconnectBTNActionPerformed

    private void DetectBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DetectBTNActionPerformed
        Main.detectGuns();
    }//GEN-LAST:event_DetectBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LaserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LaserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LaserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LaserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LaserInterface().setVisible(true);
            }
        });
        
    }

    /**
     * Add a entry in the log window
     * @param message
     */
    public void log(String message) {
        //Append the text message and line break
        log.append(message+"\n");
    }
    
    /**
     * Updates the ComboBox with the available com-ports on the system.
     */
    private void updateList() {
        comPortBox.removeAllItems();
        String[] list = SerialPortList.getPortNames();
        for (String list1 : list) {
            comPortBox.addItem(list1);
        }
    }
    
    /**
     * Clears the gamemode combobox.
     */
    public void clearGamemodes() {
        gamemodeBox.removeAllItems();
    }
    
    /**
     * Add a gamemode to the gamemode combobox.
     * @param gamemodeName the name of the gamemode.
     */
    public void addGamemode(String gamemodeName) {
        gamemodeBox.addItem(gamemodeName);
    }
    
    /**
     * Disable all options
     */
    public void disableAll() {
        Component[] com = panel.getComponents();  
        for (Component com1 : com) com1.setEnabled(false);        
    }
    
    /**
     * Enable all options
     */
    public void enableAll() {
        Component[] com = panel.getComponents();  
        for (Component com1 : com) com1.setEnabled(true);        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DetectBTN;
    private javax.swing.JButton DisconnectBTN;
    private javax.swing.JButton abortGamemodeBTN;
    private javax.swing.JButton advancedBTN;
    public javax.swing.JSpinner ammo;
    public javax.swing.JCheckBox bulletsCheckbox;
    public javax.swing.JComboBox comPortBox;
    private javax.swing.JButton comRefresh;
    public javax.swing.JButton connectBTN;
    private javax.swing.JButton gamemodeBTN;
    public javax.swing.JComboBox gamemodeBox;
    public javax.swing.JSpinner health;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JSpinner lives;
    public javax.swing.JCheckBox livesCheckbox;
    private javax.swing.JTextArea log;
    public javax.swing.JCheckBox logCheckbox;
    public javax.swing.JPanel panel;
    private javax.swing.JButton startBTN;
    // End of variables declaration//GEN-END:variables
}